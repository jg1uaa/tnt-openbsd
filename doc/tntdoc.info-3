This is Info file tntdoc.info, produced by Makeinfo version 1.68 from
the input file tntdoc.texinfo.

   Documentation of TNT - A UNIX Packet-Radio Terminal Program

   Copyright (C) 1993-1997 by Mark Wahl, DL4YBG


File: tntdoc.info,  Node: Handling Flexnet connection quality checks,  Next: Operating different software with same callsign,  Prev: Huffman compression,  Up: Other topics

Handling Flexnet connection quality checks
==========================================

   The Flexnet digipeater protocol uses connects to determine the
connection quality and availability. These connects leads to
unnecessary activation of connect-texts, DPBox or other programs
connected at the interface. In addition the logbook will be flooded
with these connections.

   So TNT provides a file where the callsigns of Flexnet-digipeaters
performing these connection quality checks can be stored
(tnt_flchkfile). If a callsign found in this file is connecting, it
will get no connect-text, no remote- access and no connection via
interface will be started. The logbook will not contain this connection.

   The contents of this file can be displayed by command LSTFLCHK. When
the file was updated, it can be reread using command LDFLCHK.


File: tntdoc.info,  Node: Operating different software with same callsign,  Next: PACSAT broadcast operation,  Prev: Handling Flexnet connection quality checks,  Up: Other topics

Operating different software with same callsign
===============================================

   If you want to operate different software with the same callsign,
you want to define what SSID's of your call TNT must not use.  This can
be done in the file defined by 'tnt_notownfile'. Calls contained in
this file will not be used for connecting using routing scripts.

   The contents of this file can be displayed by command LSNOTOWN. When
the file was updated, it can be reread using command LDNOTOWN.


File: tntdoc.info,  Node: PACSAT broadcast operation,  Next: Autostart on connect,  Prev: Operating different software with same callsign,  Up: Other topics

PACSAT broadcast operation
==========================

   TNT includes a PACSAT broadcast compatible receiver and transmitter.
The code is mainly based on the pascal source code written by Joachim,
DL8HBS.

   The receiver is enabled by setting DECBCAST to ON. All files
received in frames in PACSAT broadcast protocol will be decoded.
Depending on the type of the file, a complete file will be stored in
'tnt_bcsavedir' (normal files) or will be sent to DPBox (BBS-files).

   If parts of the received file are missing and the
broadcast-transmitter allows it by a not permanent transmission, the
missing parts can be requested.  This is enabled by setting BCRQST to
ON.

   The status of the broadcast receiver can be displayed by BCRXSTAT.
All files successfully received or currently in reception will be
displayed. Some statistical information shows the progress.

   The broadcast transmitter is controlled either by DPBox to do a
broadcast of BBS-files. More information can be found in the
DPBox-documentation. In addition a broadcast transmission of normal
files (command SENDBC) is possible, too.

   The status of the broadcast transmitter can be displayed by
BCTXSTAT. All files currently transmitted are listed including some
statistical information.

   As the TheFirmware and WA8DED-software does not allow to change the
PID used for transmitted frames, the broadcast transmission will be
sent using PID F0. This can lead to problems using other software
(WISP) as a receiver.  TFKISS and a special version of TheFirmware (ask
me or DL8HBS for it) allows the change of the PID and therefore the
correct broadcast transmission according to the protocol.


File: tntdoc.info,  Node: Autostart on connect,  Next: TNT as daemon/TNTC,  Prev: PACSAT broadcast operation,  Up: Other topics

Autostart on connect
====================

   There are many possibilities in TNT (RUN, SOCKET) to allow a remote
user to use other software on the system. But to start these
applications you first have to give a special command when connected to
TNT.

   To make these application easily accessible and to hide that TNT is
doing the work, you can define for specific callsign/SSID combinations
an autostart command. This command, which contains any valid remote
command plus parameters, will be executed, when the callsign/SSID
combination will be connected.

   The autostart-feature must be enabled using command AUTOSTRT, by
default autostart is disabled.

   To be able to connect the callsign/SSID combination, you have to
define one or more channels of your TNC to use this callsign (use
MYCALL in tnt.up).

   The callsign/SSID combinations and the autostart commands are
defined in 'tnt_autostartfile'. The actual data can be displayed using
LSAUTOST, if the file was changed, it can be reread using LDAUTOST.


File: tntdoc.info,  Node: TNT as daemon/TNTC,  Next: Options at startup,  Prev: Autostart on connect,  Up: Other topics

TNT as daemon, TNTC
===================

   Normally, TNT will use a console for the user interface. But there
are some cases where this is not wanted or needed:
     - TNT user interface needed on different host
     - changing between X and terminalmode without terminating TNT
     - no user interface needed

   Therefore TNT can be started as a daemon using the command line
parameter '-d' on startup. TNT then accepts socket connect requests on
the socket address specified after 'frontend_socket' in tnt.ini.  This
socket address can have different formats (equal to the definition for
socket servers):

  a. UNIX-sockets
     The format for a UNIX-socket is 'unix:<socket path>' or
     'local:<socket path>'. The path can be an absolute path beginning
     with a   '/' or a relative path to 'tnt_dir'.
     Example:
          unix:tntsock
          unix:/tcp/sockets/convers

  b. INET-sockets
     The format for a INET-socket is 'ip-address:port'. ip-address can
     be   a hostname, an ip-address or a '*' for any ip-address. Port
     can be any   valid port number or a name for a service.
     Example:
          *:3600
          199.199.10.10:ftp
          foo.bar.com:2000

   To connect TNT, a remote console program is available: TNTC. It uses
its own configuration file tntc.ini, where the home directory and the
socket to connect is stored. At start TNTC sends the terminal type
(environment entry TERM) and the lines and columns of the display to
TNT. Except for the number of columns which are fixed to the value
specified after 'input_linelen' in tnt.ini, these values are taken to
provide correct screen positioning and attributing.

   TNTC can be finished without terminating TNT by giving command QUIT.
With EXIT both TNT and TNTC will be terminated.


File: tntdoc.info,  Node: Options at startup,  Next: Running under X11,  Prev: TNT as daemon/TNTC,  Up: Other topics

Options at startup
==================

   Usage : tnt [-i <init-file>] [-l <log-file>] [-u] [-d]

   TNT has four startup options. A file after -i is taken as the init
file and a file after -l is opened on channel 1 equal to a LOGREC
command.  The -l option is useful if the TNC holds data from the time
without a terminal.  If the program was not normally ended and the
serial port is still locked, the lockfile can be ignored with -u. If
TNT shall be started as a daemon without terminal the parameter -d must
be specified. A connection to TNT can be established with tntc.

   Usage : tntc [-i <init-file>] [-s <tnt-socket>]

   TNTC has two startup options. A file after -i is taken as the init
file.  A socket specified after -s will be used instead of the
'frontend_socket' defined in tntc.ini.


File: tntdoc.info,  Node: Running under X11,  Next: Porting of TNT,  Prev: Options at startup,  Up: Other topics

Running under X11
=================

   TNT needs a xterm or rxvt console for running under X11. Therefore
TNT can be started from every xterm or rxvt shell.  As some versions of
xterm do not allow the use of the <ALT> keysequences, we suggest the
usage of rxvt, which will provide the same handling as a linux-console.
A sample script file 'xtnt' can be used to create a new window for
TNT.  See the manual entry rxvt(1) for further information.


File: tntdoc.info,  Node: Porting of TNT,  Next: Linux kernel AX.25 interface,  Prev: Running under X11,  Up: Other topics

Porting of TNT
==============

   In config.h several options can be defined or undefined. Create a
new entry in config.h and a new makefile for your operating system. At
the moment Linux and Interactive UNIX (ISC) are supported.  The codes
generated by function and special keys are defined in keys.h and must
be adapted.  Because in most cases not all keys are listed in the
/etc/termcap entry the keycodes are defined in this way.  If your
porting was successful, please send me your changes. They will be
included then in the next release.


File: tntdoc.info,  Node: Linux kernel AX.25 interface,  Prev: Porting of TNT,  Up: Other topics

Linux kernel AX.25 interface
============================

   [Note: the information in this section is quite old and probably
outdated]

     Release notes TNT V1.1alpha1 with AX25-kernel interface
     -------------------------------------------------------
     
     0. Preface
     
     As TNT is using the AX25-kernel-interface and some functions of the
     ax25-utilities, you must install all these stuff and get it working.
     For help see the AX25-HOWTO. If you don't succeed, it makes NO sense to
     try it with TNT!
     
     As TNT is not using all features of the AX25-kernel (no NETROM, no ROSE)
     and may use the other features incorrectly I consider it as status
     alpha. The development was done using Kernel 2.0.28 and ax25-utilities
     2.0.12c without further patches. Any other configuration was not tested and
     may lead to problems. But I am interested in feedback of any kind to
     improve the code.
     
     In addition not all features of TNT in the hostmode-version are working
     correctly. For example the PACSAT broadcast transmitter is broken. Most
     other things should work.
     
     Please read the documentation of TNT, as this is needed for proper operation
     of the program.
     
     
     1. Preparations
     
     1.1 Library of ax25-utilities
     
     TNT needs the library functions provided by the ax25-utilities. Therefore
     you need to have a compiled version of the ax25-utilities on your system.
     In addition you have to provide a symbolic link from the directory where
     the tnt source is located to the 'lib'-directory of the ax25-utilities.
     
     Suppose your tnt-dir is /usr/local/src/tnt1.1/ and your ax25-utilities-dir
     is /usr/local/src/ax25-utils-2.0.12c, the following commands have to be
     issued:
     
     cd /usr/local/src/tnt1.1/
     ln -s /usr/local/src/ax25-utils-2.0.12c/lib lib
     
     
     1.2 Makefile of TNT
     
     To compile TNT with AX25 kernel support, you have to adapt the Makefile.
     Be sure to uncomment the three lines below:
     
     # uncomment, if you want to use the Linux AX25 Kernel
     CFLAGS          := $(CFLAGS) -DUSE_AX25K
     LIBS            := $(LIBS) -lax25
     LDFLAGS         := $(LDFLAGS) -Llib
     
     
     1.3 special entries in 'tnt.ini'
     
     1.3.1 ax25k_port
     
     To use the AX25-kernel-interface in TNT, you have to define 'ax25k_port' in
     'tnt.ini'. For example the line
     
     ax25k_port P3
     
     defines the use of the AX25-kernel and that P3 (a valid port from 'axports')
     will be the default port.
     The parameters concerning serial interface will be ignored, so they can have
     every value.
     
     
     1.3.2 fullmoni_flag
     
     The kernel provides two ways of getting frames for the monitor screen.
     a. Only received frames are displayed.
     b. All frames are displayed.
     The disadvantage of b. is that TNT has to analyse ALL frames of the network
     including ethernet-traffic. So on a busy ethernet TNT will generate high
     load because of this. So it depends on your configuration whether you can
     use this option. To select the options you must use the parameter
     'fullmoni_flag' in tnt.ini:
     
     fullmoni 0      -> a.
     fullmoni 1      -> b.
     
     Generally monitoring is available only when TNT is started by root. If
     started by a user the monitor is disabled. The kernel does not allow a user
     to open a monitor socket.
     
     
     1.3.3 tnt_errlog
     
     All problems which will occur and may lead to a termination of TNT will be
     stored in a logfile. The default filename is 'tnterr.log' in the main TNT
     directory. If you want to define another name use parameter 'tnt_errlog'
     in tnt.ini.
     
     
     2. Some things on operation
     
     2.1 Port handling
     
     TNT reads the 'axports'-file at startup. It takes the definitions from there
     and the portnames at the start of the lines will be taken as port prefixes.
     You can check the assignment with the command 'QRG'.
     The port prefixes (with a ':' at the end) define in all commands which port
     shall be used.
     If for example you have defined a port named 'P3' the command
     'c p3:te1st' will try to connect te1st on port P3.
     
     
     2.2 Callsign handling
     
     At startup TNT will set the callsign of all channels to the callsign of the
     default port defined in 'ax25k_port' in tnt.ini. This means, that TNT is
     listening on all ports in 'axports' with the callsign of the default port.
     This can be changed by assigning different callsigns to the channels using
     'MYCALL' command. Currently the callsign defined is listening on all ports,
     there is no way to just listen on only one port out of your ports defined in
     'axports'.
     If you temporarily want to use a different callsign/SSID you can use the
     'I'-command as this will not fix the callsign on this channel. After a
     disconnect the old callsign will be restored.
     
     
     2.3 Unproto handling
     
     The destination for UNPROTO frames is given via 'C'-command in channel 0,
     the unproto channel. After startup UNPROTO frames will be transmitted to
     'TNT' on the default port. If you give 'C P4:beacon', the UNPROTO frames
     will contain the destination 'BEACON' and will be transmitted on port P4.
     
     
     2.4 Parameters
     
     The parameters normally handled by 'axparms', 'axctl' and 'kissparms' can be
     handled by TNT directly. The use of the other programs is possible, too.
     The parameters can be changed and displayed. KISS-parameters can be changed
     only as there is no way to read the current values.
     
     If you handle parameters on an unconnected channel, the default values of
     the port are handled. If you don't give a port, the default port is used.
     Examples: 'n 20' will set the retries on the default port to 20.
               'o P3:6' will MAXFRAME to 6 on port P3
               '@T2' will display the T2-timer on the default port
               '@T3 P2:' will display the T3-timer on port P2
     
     On a connected channel you will change the parameters of the connection on
     this channel. After disconnect these values will be lost. If you don't give
     a port, the port of the connection will be used. If a port different than
     the port of the connection is given, the command is rejected.
     
     Here is a list of the implemented parameters:
     
     TNC-like   verbose     AX25-kernel-    KISS         value       special
     command    command     value           value        readable    values
     -------    --------    ------------    ---------    --------    -------
     F          FRACK       T1              -            yes
     N          RETRY       N2              -            yes
     O          MAXFRAME    WINDOW          -            yes
     P          PERSIST     -               PERSIST      no
     R          DIGIPEAT    DIGI            -            yes           0-3
     T          TXDELAY     -               TXDELAY      no
     W          SLOTTIME    -               SLOTTIME     no
     @D         FULLDUP     -               FULLDUP      no
     @T2        RESPTIME    T2              -            yes
     @T3        CHECK       T3              -            yes
     @TA        -           -               TXTAIL       no
     #BACKOFF   -           BACKOFF         -            yes           L/E
     #IDLE      -           IDLE            -            yes
     #PACLEN    -           PACLEN          -            yes
     #HARDWARE  -           -               HARDWARE     no           0-255
     
     (Hint: TNC-like commands without a verbose command have to be given with
      'tnc' at the beginning: 'tnc #BACKOFF P3:')
     
     To setup specific values at startup of TNT you can use 'tnt.up'. Be sure
     to define a channel with the 'channel' command.
     
     
     3. Credits
     
     Thanks to all who worked on the AX25-Kernel and the ax25-utilities, as this
     work is the basis of the code in 'ax25k.c'.
     
     Mark Wahl, DL4YBG
     
     (DL4YBG  DB0GR.#BLN.DEU.EU)
     (wahlm@berlin.snafu.de)
     (http://www.snafu.de/~wahlm)


File: tntdoc.info,  Node: Description of configuration files,  Next: Credits and Contact,  Prev: Other topics,  Up: Top

Description of configuration files
**********************************

* Menu:

* Main configuration file::
* TNT startup/shutdown file::
* Cookie file::
* Files for remote commands::
* Files for connect text::
* Files for names database and routing scripts::
* User-Ids and security::
* Logfile for resynchronisation::
* File for keyboard macros::
* File for password generation::
* File for sysop authentification::
* File for remote commands disabling::
* File containing not own callsigns::
* File containing Flexnet digipeaters::
* File for AX25-server access::
* File for autostart on connect::
* File for extended remote commands::
* Files for BBS features::
* Configuration file for TNTC::


File: tntdoc.info,  Node: Main configuration file,  Next: TNT startup/shutdown file,  Up: Description of configuration files

Main configuration file
=======================

   The configuration of the program is done by the main configuration
file.  If no filename is given by the -i switch at TNT startup, the
first of the following files will be used: $HOME/.tnt/tnt.ini,
$HOME/.tnt/.tntrc, tnt.ini, .tntrc, PREFIX/share/tnt/conf/tnt.ini,
PREFIX/share/tnt/conf/.tntrc, where $HOME is your home directory and
PREFIX the directory specified by the `--prefix' option to the
configure script (defaults to /usr/local).

* Menu:

* Serial and general configuration::
* Security::
* Directories Files and Sockets::
* Lines of virtual screens::
* Display configuration::
* Screen attributes::
* Packet assembly timeout::
* Additional options::

sample tnt.ini:

     # defines if select() shall be used, normally 1, put to 0, if you are
     # using old kernels (select() produces there a higher CPU-load).
     use_select 1
     
     # --------------------------------------------------------------------------
     
     # 0 for real TNC at serial port, 1 for TFKISS on a UNIX-socket,
     # 2 for TFKISS on other socket
     soft_tnc 0
     
     # serial port to which TNC is connected, UNIX-socket of TFKISS or
     # other socket for TFKISS
     device /dev/ttyS0
     
     # lockfile for serial port or TFKISS
     tnt_lockfile /usr/spool/uucp/LCK..ttyS0
     
     # baudrate used, only used if TNC at serial port
     speed 19200
     
     # timinig parameters for interface to tfkiss (soft_tnc is 1)
     # 1: fixed wait (10ms) after each hostmode-packet sent to tfkiss
     fixed_wait 1
     # if fixed_wait == 0, number of sent characters to tfkiss after which
     # tnt will wait 10ms
     amount_wait 20
     
     # --------------------------------------------------------------------------
     
     # number of channels of TNC
     tnc_channels 10
     
     # first channel with reduced backscroll buffer
     r_channels 4
     
     # --------------------------------------------------------------------------
     
     # enable static huffman compression (//COMP)
     tnt_comp 1
     
     # try to uncompress frames in the monitor window
     moni_decomp 1
     
     # disable binary packets
     moni_chkbin 1
     
     # packet length for transmission of files
     file_paclen 255
     
     # set to 1 to disconnect all channels on startup
     disc_on_start 0
     
     # --------------------------------------------------------------------------
     
     # UNIX-user for remote permissions
     remote_user guest
     
     ### Only available if compiled with GEN_NEW_USER support!
     # If set to 1, new users will be created, if set to 0, all new users will
     # be logged in as user defined by 'remote_user'.
     #unix_new_user 1
     
     # lowest user-id for creation of new users
     #unix_first_uid 410
     
     # highest user-id for creation of new users
     #unix_user_max 4095
     
     # group-id for new users
     #unix_user_gid 101
     ###
     
     # --------------------------------------------------------------------------
     
     # timeout packet assembly (in seconds) for SHELL/REDIR and interface
     pty_timeout 2
     
     # --------------------------------------------------------------------------
     
     # set to 1 for request of R:-headers in boxlist read command
     blist_add_plus 0
     
     # --------------------------------------------------------------------------
     
     # SSID of DPBox (A channel with this SSID must exist in TNC!)
     tnt_box_ssid 7
     
     # Call and SSID of DPBox (A channel with this Call and SSID
     # must exist in TNC!)
     # (If this parameter is used, 'tnt_box_ssid' will be ignored)
     #tnt_box_call
     
     # SSID of a node connect (not yet ready)
     tnt_node_ssid 9
     
     # Call and SSID of a node connect (not yet ready)
     #tnt_node_call
     
     # --------------------------------------------------------------------------
     
     # work/spool directory
     tnt_work_dir /work/tnt/
     # configuration directory
     tnt_conf_dir /work/tnt/
     # doc dir directory
     tnt_doc_dir /work/tnt/
     # log file directory
     tnt_log_dir /work/tnt/
     # pid/socket directory
     tnt_bin_dir /work/tnt/
     # remote directory
     remote_dir remote/
     # ctext directory
     ctext_dir ctext/
     # directory for corrupt autobin-files
     abin_dir abin/
     # directory for uploads
     upload_dir up/
     # directory for downloads
     download_dir down/
     # directory for 7plus
     tnt_7plus_dir 7plus/
     # directory for YAPP
     yapp_dir yapp/
     # directory for executable programs
     tnt_bin_dir bin/
     # home-dir for new users (only if compiled with GEN_NEW_USER support)
     #unix_user_dir tntusers/
     # dir for macro-texts
     macrotext_dir macro/
     # dir for box-broadcastfiles
     tnt_bcnewmaildir bcast/newmail/
     # dir for broadcastfiles
     tnt_bcsavedir bcast/save/
     # dir for temporary broadcastfiles
     tnt_bctempdir /tmp/
     # dir for tnt soundfiles (only if compiled with TNT_SOUND!)
     #tnt_sound_dir /work/tnt/sounds
     # upfile
     tnt_upfile tnt.up
     # downfile
     tnt_downfile tnt.dwn
     # file containing process id
     proc_file tnt.pid
     # remote infofile
     rem_info_file tntrem.inf
     # remote helpfile
     rem_help_file tntrem.hlp
     # tnthelpfile
     tnt_help_file tnt.hlp
     # cookiefile
     tnt_cookiefile /usr/games/fortunes/startrek
     # namesfile
     name_file_name names.tnt
     # routesfile
     route_file_name routes.tnt
     # newsfile
     news_file_name news.tnt
     # connect text
     tnt_ctextfile ctext.tnt
     # quit text
     tnt_qtextfile qtext.tnt
     # logbook file
     tnt_logbookfile tnt.log
     # password file
     tnt_pwfile pw.tnt
     # sysop access files
     tnt_sysfile sys.tnt
     # calls with remote disabled
     tnt_noremfile norem.tnt
     # calls which do flexnet-linkquality-check
     tnt_flchkfile flchk.tnt
     # own call/SSID not allowed for xconnect
     tnt_notownfile notown.tnt
     # resync logfile
     resy_log_file resy.log
     # broadcast logfile
     bcast_log_file bcast.log
     # socket passwordfile
     sock_passfile netpass.tnt
     # file for keyboard macros
     func_key_file fkeys.tnt
     # file for extended remote commands
     tnt_extremotefile extrem.tnt
     # file for autostart on connect
     tnt_autostartfile autostrt.tnt
     # file for telltexts
     tnt_tellfile telltexte.tnt
     # Logfile for saving tnt-session status
     tnt_sessionlog /var/log/tntsession_status
     # file for sound effects (only if compiled with TNT_SOUND!)
     # tnt_soundfile sounds.tnt
     
     # socket for digipoint box
     # use "0", if you don't want to use dpbox
     box_socket /work/box/stat/socket
     # directory for newmail
     newmaildir newmail/
     # file holding monitored folders
     autobox_dir autobox.dir
     # file for boxfile endings
     tnt_boxender boxender.tnt
     # file for f6fbb-definitions
     f6fbb_box /work/box/system/f6fbb.box
     
     # socket for tntnode (not yet ready)
     node_socket /work/tntnode/socket
     
     # socket for frontend
     frontend_socket unix:tntsock
     
     # --------------------------------------------------------------------------
     
     # maximum length of input line
     input_linelen 80
     
     # set to 1 if insertmode shall be active after startup
     insertmode 0
     
     # maximum number of entries in heardlist
     num_heardentries 100
     
     # number of lines for backscroll
     
     # command-screen
     lines_command 50
     # monitor-screen
     lines_monitor 400
     
     # input area of connect-screens
     lines_input 20
     # output area of connect-screens
     lines_output 100
     # input area of connect-screens (reduced backscroll)
     lines_r_input 5
     # output area of connect-screens (reduced backscroll)
     lines_r_output 20
     # input/output-lines ratio on real screen (connect)
     scr_divide 5
     # monitor lines on connect-screens
     lines_moncon 0
     
     # input area of mailbox-screen
     lines_mbinput 10
     # output area of mailbox-screen
     lines_mboutput 200
     # input/output-lines ratio on real screen (mailbox)
     mbscr_divide 8
     
     # input area of extended monitor screens
     lines_xmon_pre 10
     # output area of extended monitor screens
     lines_xmon 100
     # input/output-lines ratio on real screen (extended monitor)
     xmon_scr_divide 5
     
     # --------------------------------------------------------------------------
     
     # 0: monochrom, 1: use color attributes if TERM = 'linux' or 'conXXX',
     # otherwise use monochrom attributes and termcap, 2: use color attributes,
     # 3: use color attributes and termcap if TERM = 'xterm'
     color 1
     
     # 0: don't use termcap, 1: use termcap
     termcap 0
     
     # 1: alternative channel status line
     altstat 0
     
     # --------------------------------------------------------------------------
     
     # attributes for color
     
     # normal characters
     attc_normal 0x47
     # characters in bottom statusline
     attc_statline 0x3A
     # characters in monitor-headers
     attc_monitor 0x4A
     # characters in channel statusline
     attc_cstatline 0x74
     # control-characters
     attc_controlchar 0x07
     # remote-answers
     attc_remote 0x4F
     # special features
     attc_special 0x0F
     # color for port 1
     attc_monport1 0x4B
     # color for port 2
     attc_monport2 0x43
     
     # --------------------------------------------------------------------------
     
     # attributes for monochrom
     
     # normal characters
     attm_normal 0x00
     # characters in bottom statusline
     attm_statline 0x08
     # characters in monitor-headers
     attm_monitor 0x10
     # characters in channel statusline
     attm_cstatline 0x10
     # control-characters
     attm_controlchar 0x10
     # remote-answers and own transmitted text
     attm_remote 0x10
     # special features
     attm_special 0x10
     # color for port 1
     attm_monport1 0x10
     # color for port 2
     attm_monport2 0x08
     
     # --------------------------------------------------------------------------
     
     # these values must remain unchanged using LINUX
     
     # 1: terminal puts cursor to a new line after character in last column
     auto_newline 0
     
     # 1: don't display characters 128-160
     supp_hicntl 0
     
     # --------------------------------------------------------------------------
     
     # AX25 Port (only if compiled with USE_AX25K)
     # ax25k_port P3
     
     # Fullmoniflag (0: display only received frames, 1: display all frames)
     # NOTE: a value of '1' means that TNT have to analysis all frames of the
     #       network which will cause a high load if you are using a busy ethernet
     # fullmoni_flag 0
     
     <EOF>


File: tntdoc.info,  Node: Serial and general configuration,  Next: Security,  Up: Main configuration file

Serial and general configuration
--------------------------------

`'use_select''
     Defines if select() shall be used, normally 1, put to 0, if you
     are using old kernels (select() produces there a higher CPU-load)

`'soft_tnc''
     Defines if a real TNC (0) is connected or TFKISS (1,2).

`'device''
     Device, to which the TNC is connected, must be specified. If
     TFKISS is used and soft_tnc is 1, device must contain the path and
     filename of the UNIX-socket. If soft_tnc is 2, device must contain
     a general socket description like explained in the Detailled
     description of the socket servers.

`'speed''
     Baudrate of the serial port, only used if configured for a real TNC

`'tnt_lockfile''
     Filename to lock the port. Shall follow the usual conventions: for
     device /dev/cua0 specify the lockfile /usr/spool/uucp/LCK..cua0.
     For TFKISS use a pseudo-lockfile like /usr/spool/uucp/tfkiss or
     similar.

`'fixed_wait''
     Only valid if TFKISS is used: Normally set to 1, which means a
     fixed wait of 10ms after each hostmode-packet sent to TFKISS. If
     0, 'amount_wait' defines the waiting.

`'amount_wait''
     Only valid if TFKISS is used and 'fixed_wait' set to 0: Number of
     characters sent to TFKISS after which TNT will wait 10ms (can be
     used to optimize the timing).

`'tnc_channels''
     Number of channels of TNC.

`'r_channels''
     First channel with reduced backscroll buffer.

`'tnt_comp''
     If not 0, static huffman compression is activated.  In this case
     the maximum file packet length ('file_paclen') is 255 characters.

`'file_paclen''
     Defines the maximum length of a packet. Valid values are 20 up to
     256 characters. If huffman compression is activated ('tnt_comp'),
     the maxmimum value is 255 characters. The value can be changed by
     command FPACLEN.

`'disc_on_start''
     If 1, all established connection are disconnected on startup of
     TNT, if 0, connections remain active.

`'blist_add_plus''
     If not set to 0, a '+' is appended to the boxlist read command. As
     a result the mail will contain full R: lines.

`'tnt_box_ssid''
     If the SSID of the own call on the current channel is equal to this
     SSID, DPBox is started on connect.

`'tnt_box_call''
     If the own call (plus SSID) on the current channel is equal to this
     call (plus SSID), DPBox is started on connect. This parameter will
     override 'tnt_box_ssid'. It can be used, if different callsigns
     with the same SSID shall be used and DPBox shall be activated only
     for one of the calls.

`'tnt_node_ssid''
     If the SSID of the own call on the current channel is equal to this
     ssid, TNTNODE is started on connect.  (function currently under
     development).

`'tnt_node_call''
     If the own call on the current channel is equal to this call,
     TNTNODE is started on connect. This parameter will override
     'tnt_node_ssid'. It can be used, if different callsigns with the
     same SSID shall be used and TNTNODE shall be activated only for
     one of the calls.  (function currently under development).


File: tntdoc.info,  Node: Security,  Next: Directories Files and Sockets,  Prev: Serial and general configuration,  Up: Main configuration file

Security
--------

`'remote_user''
     User-Id for remote access.

   If TNT was started by root, prior to every remote file command the
user-id is changed to restrict the file permissions of the remote user.
If TNT was started by a normal user, the user-id is not changed.
Therefore a remote user has the same file permissions as the user
himself.

`'unix_new_user''
     1: A new user gets an entry in /etc/passwd and a directory is
     created.
     0: A new user is logging in as specified in 'remote_user'.

`'unix_first_uid''
     First user-ID which will be taken for new users.

`'unix_user_gid''
     Group-ID used for new users.


File: tntdoc.info,  Node: Directories Files and Sockets,  Next: Lines of virtual screens,  Prev: Security,  Up: Main configuration file

Directories, Files and Sockets
------------------------------

   The directory 'tnt_dir' must always contain the complete path. For
all other files and directories it depends on the first character of
the path. If the first character is a '/', then the path is taken as
the complete path. If the first character is not '/', 'tnt_dir' is put
in front of the path.

* Menu:

* Directories::
* Files::
* Sockets and Boxfiles::


File: tntdoc.info,  Node: Directories,  Next: Files,  Up: Directories Files and Sockets

Directories
...........

`'tnt_dir''
     Directory which contains tnt-files

`'remote_dir''
     Directory used for remote access

`'ctext_dir''
     Directory used for personal connect texts

`'abin_dir''
     Directory for files of unsuccessful AutoBIN-transfers

`'upload_dir''
     Directory for sending files (SEND/SENDLOG/...) if no directory was
     specified.

`'download_dir''
     Directory for receiving files (READ/LOGQSO/...) if no directory
     was specified.

`'yapp_dir''
     Directory for receiving files using AUTOYAPP.

`'tnt_7plus_dir''
     Directory for receiving files using AUTO7PL.

`'tnt_bin_dir''
     Directory for executable programs (//RUN).

`'unix_user_dir''
     Root-directory for directories of new users.

`'macrotext_dir''
     Directory for files containing text-macros (MSEND)

`'tnt_bcnewmaildir''
     Directory where received broadcast-files of type BBS will be
     stored.

`'tnt_bcsavedir''
     Directory where other received broadcast-files will be stored.

`'tnt_bctempdir''
     Directory for temporary files generated by broadcast receiver.

`'newmaildir''
     Directory where mails read by AUTOBOX and MONBOX are stored for
     DPBox


File: tntdoc.info,  Node: Files,  Next: Sockets and Boxfiles,  Prev: Directories,  Up: Directories Files and Sockets

Files
.....

`'tnt_upfile''
     Command script executed at startup of program

`'tnt_downfile''
     Command script executed before exit of program

`'proc_file''
     File which will contain the process ID of the running TNT process

`'rem_info_file''
     File transmitted if remote command //info is received

`'rem_help_file''
     File transmitted if remote command //help is received

`'tnt_help_file''
     File which is displayed if help screen is selected

`'tnt_cookiefile''
     File which contains database for fortune cookies

`'name_file_name''
     File for names database

`'route_file_name''
     File for routing database

`'news_file_name''
     File for news message, transmitted if //news is received or if %i
     macro is found in a connect text file

`'tnt_ctextfile''
     File containing common connect text

`'tnt_qtextfile''
     File containing quit text

`'tnt_logbookfile''
     File for logbook

`'tnt_pwfile''
     File for generation of passwords

`'tnt_sysfile''
     File for access restriction and sysop authentification

`'tnt_noremfile''
     File containing calls for which remote-commands are disabled

`'tnt_flchkfile''
     File containing calls which do flexnet-linkquality-check

`'tnt_notownfile''
     File containing call plus SSID which are not allowed for xconnect

`'resy_log_file''
     Logfile if a resync occured

`'bcast_log_file''
     Logfile for errors/warnings from broadcast receiver/transmitter

`'sock_passfile''
     Socket login database

`'func_key_file''
     Definition of keyboard macros

`'tnt_extremotefile''
     File defining extended remote commands

`'tnt_autostartfile''
     File defining autostart commands executed on connect


File: tntdoc.info,  Node: Sockets and Boxfiles,  Prev: Files,  Up: Directories Files and Sockets

Sockets and Boxfiles
....................

`'box_socket''
     Path and name of the UNIX-socket used for connection to DPBox.

`'autobox_dir''
     File containing boards which shall be monitored using
     MONBOX-feature.

`'tnt_boxender''
     File containing strings indicating end or abort of message (MONBOX
     and AUTOBOX).

`'f6fbb_box''
     File containing strings which are used by the F6FBB-Box you are
     using. This file is used by DPBox, too and shall be placed in the
     DPBox-system-directory.  A correct definition is needed for the
     AUTOBOX-feature.

`'node_socket''
     Path and name of the UNIX-socket used for connection to TNTNODE
     (currently under development).

`'frontend_socket''
     Name of the socket used by frontend TNTC if TNT is started as a
     daemon. The syntax is identical to the socket definition in the
     detailled description of the socket servers.


File: tntdoc.info,  Node: Lines of virtual screens,  Next: Display configuration,  Prev: Directories Files and Sockets,  Up: Main configuration file

Lines of virtual screens
------------------------

`'input_linelen''
     Maximum length of input line at which additional characters are
     ignored or wordwrap is executed.  The value can be changed with
     command LINelen.

`'insertmode''
     Set to 1 if insertmode shall be active on all screens after
     startup.

`'num_heardentries''
     Number of entries in heardlist.

`'lines_command''
     Number of lines of the command screen.

`'lines_monitor''
     Number of lines of the monitor screen.

`'lines_input''
     Number of lines of the input part of the connect screen.

`'lines_output''
     Number of lines of the output part of the connect screen.

`'lines_r_input''
     Number of lines of the input part of the connect screen (reduced
     backscroll buffer).

`'lines_r_output''
     Number of lines of the output part of the connect screen (reduced
     backscroll buffer).

`'scr_divide''
     Input/output-lines ratio on real screen (connect).  The value can
     be changed with command CONDiv.  Example: Real screen has 25
     Lines, scr_divide is 5.  25 Lines - 2 Statuslines = 23 lines for
     input/output.  23 / 5 = 4.6 -> 4 lines on input.  23 - 4 = 19
     lines for output.

`'lines_moncon''
     Number of lines of monitor screen additionally displayed on the
     connect screen. Set to 0, if no monitor lines shall be displayed.
     The value can be changed with command MONLines (The lines of the
     real screen will be reduced by the number of monitor lines, before
     the lines of input and output part will be calculated using
     scr_divide)

`'lines_mbinput''
     Number of lines of the input part of the mailbox screen.

`'lines_mboutput''
     Number of lines of the output part of the mailbox screen.

`'mbscr_divide''
     Input/output-lines ratio on real screen (mailbox).  The value can
     be changed with command MBOXDiv.

`'lines_xmon''
     Number of lines of the output part of the extended monitor screen.

`'lines_xmon_pre''
     Number of lines of the input part of the extended monitor screen.

`'xmon_scr_divide''
     Input/output-lines ratio on real screen (extended monitor screen).
     The value can be changed with command XMONDiv.


File: tntdoc.info,  Node: Display configuration,  Next: Screen attributes,  Prev: Lines of virtual screens,  Up: Main configuration file

Display configuration
---------------------

`'color''
     non color attributes (0), color attributes if LINUX- console (1)
     or color attributes always (2)

`'termcap''
     use LINUX-console control codes (0) or /etc/termcap (1)

`'altstat''
     Set to 1 if you want to use the alternative statusline on
     connect-screens. It looks more "technical".

   if color == 1 and LINUX-console control codes are selected, but the
TERM entry in the environment is not "con..." or "linux", no color and
termcap is used.


File: tntdoc.info,  Node: Screen attributes,  Next: Packet assembly timeout,  Prev: Display configuration,  Up: Main configuration file

Screen attributes
-----------------

   Depending on the selected mode (color) the color or monochrom
attributes are used.  Important notice: The attributes for normal text
and for controlcharcters in the input field MUST be different,
otherwise no control-characters can be sent.

* Menu:

* Color attributes::
* Monochrome attributes::


File: tntdoc.info,  Node: Color attributes,  Next: Monochrome attributes,  Up: Screen attributes

Color attributes
................

`'attc_normal''
     For normal text.

`'attc_statline''
     For main statusline at the bottom of the screen.

`'attc_monitor''
     For monitor headers.

`'attc_cstatline''
     For statusline of channel in connect screen.

`'attc_controlchar''
     For controlcharacters in the input field.

`'attc_remote''
     For text transmitted because of remote functions.

`'attc_special''
     For special features.

The attributes are coded in the following manner:

         X    X    X    X    X    X    X    X
       Blink BCo2 BCo1 BCo0 FCo3 FCo2 FCo1 FCo0
               Background-      Foreground-
                 Colour           Colour
     
     Blink:
     0:off, 1:on
     
     Background Color:
             BCo2 BCo1 BCo0
     Black     0    0    0
     Red       0    0    1
     Green     0    1    0
     orange    0    1    1
     blue      1    0    0
     magenta   1    0    1
     cyan      1    1    0
     white     1    1    1
     
     Foreground Color:
                   FCo3 FCo2 FCo1 FCo0
     Black           0    0    0    0
     Red             0    0    0    1
     Green           0    0    1    0
     Orange          0    0    1    1
     Blue            0    1    0    0
     Magenta         0    1    0    1
     Cyan            0    1    1    0
     White           0    1    1    1
     Grey            1    0    0    0
     Light red       1    0    0    1
     Light green     1    0    1    0
     yellow          1    0    1    1
     Light blue      1    1    0    0
     Light magenta   1    1    0    1
     Light cyan      1    1    1    0
     Light white     1    1    1    1


File: tntdoc.info,  Node: Monochrome attributes,  Prev: Color attributes,  Up: Screen attributes

Monochrome attributes
.....................

`'attm_normal''
     For normal text.

`'attm_statline''
     For main statusline at the bottom of the screen.

`'attm_monitor''
     For monitor headers.

`'attm_cstatline''
     For statusline of channel in connect screen.

`'attm_controlchar''
     For controlcharacters in the input field.

`'attm_remote''
     For text transmitted because of remote functions.

`'attm_special''
     For special features.

The attributes are coded in the following manner:

         X    X    X    X    X    X    X    X
                  Att5 Att4 Att3 Att2 Att1 Att0
     
     Att0: Standout    (termcap so/se)
     Att1: Underline   (termcap us/ue)
     Att2: Blink       (termcap mb/me)
     Att3: Reverse     (termcap mr/me)
     Att4: Bold        (termcap md/me)
     Att5: Halfbright  (termcap mh/me)
     
     0: off, 1: on


File: tntdoc.info,  Node: Packet assembly timeout,  Next: Additional options,  Prev: Screen attributes,  Up: Main configuration file

Packet assembly timeout
-----------------------

`'pty_timeout''
     Time for packet assembly

   All characters received by a shell or redirection are buffered. If
the buffer reaches the maximum packetsize (256 bytes) the buffer is
transmitted.  After each new character pty_timeout seconds are waited
for the next character. If during this time no character is given, the
buffer will be sent even if the maximum packetsize is not reached.


File: tntdoc.info,  Node: Additional options,  Prev: Packet assembly timeout,  Up: Main configuration file

Additional options
------------------

   The following switches are available to customize TNT to a different
terminal or operating system. For use with linux, both must be set to 0.

`'auto_newline''
     Set to 1 if terminal performs a newline after last character in a
     line

`'supp_hicntl''
     Set to 1 if characters in range 128-160 shall be substituted by a
     period (.)


File: tntdoc.info,  Node: TNT startup/shutdown file,  Next: Cookie file,  Prev: Main configuration file,  Up: Description of configuration files

TNT startup/shutdown file
=========================

   At the startup of the program a command script is executed. It can
be used to initialize some parameters in the TNC and to set some
options. The filename must be specified after 'tnt_upfile' in the init
file.

To set up different callsigns on specific channels the following command
sequence can be used:

     ...
     CHANNEL 4
     MYCALL DL4YBG-4
     CHANNEL 5
     MYCALL DL4YBG-5
     CHANNEL 6
     MYCALL DL4YBG-6
     ...

   After the EXIT command is given another command script is executed
before the termination of the program. The filename must be specified
after 'tnt_downfile' in the init file.

sample tnt.up file:
     # connect-text
     ctext 1 Put here your connect text !
     # monitor
     m iusc
     # number of connects
     y 10
     # bell for every received packet
     infobell on
     # no umlaut
     umlaut off
     # logfile append
     append on
     # execute word-wrap at end of line
     wordwrap on
     # send whole line
     wholelin on
     # timestamp
     k 2
     # set time in tnc
     timeset
     # set date in tnc
     dateset
     <EOF>

sample tnt.dwn file:
     ctext 1 >No terminal, please leave message<
     m n
     y 1
     <EOF>


File: tntdoc.info,  Node: Cookie file,  Next: Files for remote commands,  Prev: TNT startup/shutdown file,  Up: Description of configuration files

Cookie file
===========

   If fortune cookie sending is active (command COOKIE) and someone is
connecting to the station a randomly selected cookie out of the cookie
file will be sent.

   The cookie file consists of cookie texts delimited by a line
containg a '-' or a '%' as the first character (the rest of the line
will be ignored). The minimal size of a cookie file is 2048 bytes.

The data files contained in the 'fortunes' package in most
Linux-distributions can be used.

The filename of the cookie file must be given after 'tnt_cookiefile' in
the init file.

